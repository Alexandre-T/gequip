# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    #Service for entities
    app.axe-service:
        class: AppBundle\Service\AxeService
        public: true
        arguments: ['@doctrine.orm.entity_manager']
    app.criticity-service:
        class: AppBundle\Service\CriticityService
        public: true
        arguments: ['@doctrine.orm.entity_manager']
    app.family-service:
        class: AppBundle\Service\FamilyService
        public: true
        arguments: ['@doctrine.orm.entity_manager']
    app.service-service:
        class: AppBundle\Service\ServiceService
        public: true
        arguments: ['@doctrine.orm.entity_manager']
    app.status-service:
        class: AppBundle\Service\StatusService
        public: true
        arguments: ['@doctrine.orm.entity_manager']

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests,Twig}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    #A.T. This extension is defined to replace raw which could be attacked by XSS
    app.twig_extension:
        class: AppBundle\Twig\AppExtension
        public: false
        tags:
            - { name: twig.extension }
        calls:
            - [ setTranslator, ['@translator.default']]

    #localizeddate, localizednumber, localizedcurrency
    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    # Doctrine Extension listeners to handle behaviors
    # Tree for Family
    gedmo.listener.tree:
        class: Gedmo\Tree\TreeListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    #Timestampable
    gedmo.listener.timestampable:
            class: Gedmo\Timestampable\TimestampableListener
            tags:
                - { name: doctrine.event_subscriber, connection: default }
            calls:
                - [ setAnnotationReader, [ "@annotation_reader" ] ]

    #Sluggable
    gedmo.listener.sluggable:
            class: Gedmo\Sluggable\SluggableListener
            tags:
                - { name: doctrine.event_subscriber, connection: default }
            calls:
                - [ setAnnotationReader, [ "@annotation_reader" ] ]

    #Loggable
    app.listener.loggable:
            class: AppBundle\Listener\LoggableListener
            tags:
                - { name: doctrine.event_subscriber, connection: default }
            calls:
                - [ setAnnotationReader, [ "@annotation_reader" ] ]

    AppBundle\Listener\LoggableListenerInterface: '@app.listener.loggable'

    # KernelRequest listener
    app.listener.logger:
        class: AppBundle\Listener\LoggerListener
        tags:
            # translatable sets locale after router processing
            #- { name: kernel.event_listener, event: kernel.request, method: onLateKernelRequest, priority: -10 }
            # loggable hooks user username if one is in security context
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest}
        arguments:
            - '@app.listener.loggable'
            - '@security.token_storage'
            - '@security.authorization_checker'

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

